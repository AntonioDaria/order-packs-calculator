// Code generated by MockGen. DO NOT EDIT.
// Source: pack_config.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPackConfig is a mock of PackConfig interface.
type MockPackConfig struct {
	ctrl     *gomock.Controller
	recorder *MockPackConfigMockRecorder
}

// MockPackConfigMockRecorder is the mock recorder for MockPackConfig.
type MockPackConfigMockRecorder struct {
	mock *MockPackConfig
}

// NewMockPackConfig creates a new mock instance.
func NewMockPackConfig(ctrl *gomock.Controller) *MockPackConfig {
	mock := &MockPackConfig{ctrl: ctrl}
	mock.recorder = &MockPackConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackConfig) EXPECT() *MockPackConfigMockRecorder {
	return m.recorder
}

// GetPackSizes mocks base method.
func (m *MockPackConfig) GetPackSizes(ctx context.Context) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackSizes", ctx)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackSizes indicates an expected call of GetPackSizes.
func (mr *MockPackConfigMockRecorder) GetPackSizes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackSizes", reflect.TypeOf((*MockPackConfig)(nil).GetPackSizes), ctx)
}

// UpdatePackSizes mocks base method.
func (m *MockPackConfig) UpdatePackSizes(ctx context.Context, sizes []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePackSizes", ctx, sizes)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePackSizes indicates an expected call of UpdatePackSizes.
func (mr *MockPackConfigMockRecorder) UpdatePackSizes(ctx, sizes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePackSizes", reflect.TypeOf((*MockPackConfig)(nil).UpdatePackSizes), ctx, sizes)
}
