// Code generated by MockGen. DO NOT EDIT.
// Source: pack_calculator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPackCalculator is a mock of PackCalculator interface.
type MockPackCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockPackCalculatorMockRecorder
}

// MockPackCalculatorMockRecorder is the mock recorder for MockPackCalculator.
type MockPackCalculatorMockRecorder struct {
	mock *MockPackCalculator
}

// NewMockPackCalculator creates a new mock instance.
func NewMockPackCalculator(ctrl *gomock.Controller) *MockPackCalculator {
	mock := &MockPackCalculator{ctrl: ctrl}
	mock.recorder = &MockPackCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackCalculator) EXPECT() *MockPackCalculatorMockRecorder {
	return m.recorder
}

// CalculatePacks mocks base method.
func (m *MockPackCalculator) CalculatePacks(ctx context.Context, itemCount int) (map[int]int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculatePacks", ctx, itemCount)
	ret0, _ := ret[0].(map[int]int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CalculatePacks indicates an expected call of CalculatePacks.
func (mr *MockPackCalculatorMockRecorder) CalculatePacks(ctx, itemCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculatePacks", reflect.TypeOf((*MockPackCalculator)(nil).CalculatePacks), ctx, itemCount)
}
