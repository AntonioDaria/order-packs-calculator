// Code generated by MockGen. DO NOT EDIT.
// Source: pack_size_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPackSizeRepository is a mock of PackSizeRepository interface.
type MockPackSizeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPackSizeRepositoryMockRecorder
}

// MockPackSizeRepositoryMockRecorder is the mock recorder for MockPackSizeRepository.
type MockPackSizeRepositoryMockRecorder struct {
	mock *MockPackSizeRepository
}

// NewMockPackSizeRepository creates a new mock instance.
func NewMockPackSizeRepository(ctrl *gomock.Controller) *MockPackSizeRepository {
	mock := &MockPackSizeRepository{ctrl: ctrl}
	mock.recorder = &MockPackSizeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackSizeRepository) EXPECT() *MockPackSizeRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockPackSizeRepository) GetAll(ctx context.Context) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPackSizeRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPackSizeRepository)(nil).GetAll), ctx)
}

// ReplaceAll mocks base method.
func (m *MockPackSizeRepository) ReplaceAll(ctx context.Context, sizes []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceAll", ctx, sizes)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceAll indicates an expected call of ReplaceAll.
func (mr *MockPackSizeRepositoryMockRecorder) ReplaceAll(ctx, sizes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAll", reflect.TypeOf((*MockPackSizeRepository)(nil).ReplaceAll), ctx, sizes)
}
